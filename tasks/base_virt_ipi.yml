---
# vim: set ft=ansible:

- name: Query the Equinix metadata endpoint
  ansible.builtin.uri: 
    url: https://metadata.platformequinix.com/metadata
  register: r_metadata

- name: Set a variable for the server region (us, eu, ap)
  set_fact: 
    server_region: "{{ regions[r_metadata.json.metro] | default('us') }}"

- name: restart libvirtd
  service: name=libvirtd state=restarted

- name: Copy over virtual network definition files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/tmp"
    owner: root
    group: root
    mode: 0644
  loop:
    - ocp4-net.xml
    - ocp4-prov-net.xml
    - ocp4-flat-net.xml

- name: create libvirt hooks dir
  ansible.builtin.file:
    path: /etc/libvirt/hooks
    state: directory
    mode: 0755

- name: setup libvirt hook for network restart
  ansible.builtin.copy:
    src: network-hooks
    dest: /etc/libvirt/hooks/network
    owner: root
    group: root
    mode: 0744

- name: Check if ocp4-net network is already configured
  ansible.builtin.command: virsh net-dumpxml ocp4-net
  register: ocp4_net_return
  failed_when: ocp4_net_return.rc > 1

- name: Check if ocp4-prov-net network is already configured
  ansible.builtin.command: virsh net-dumpxml ocp4-provisioning
  register: ocp4_prov_return
  failed_when: ocp4_prov_return.rc > 1
  when: ocp4_aio_deploy_type == "ipi"

- name: Enable OpenShift base network (192.168.123.100/24)
  ansible.builtin.shell: "{{ item }}"
  loop:
    - "virsh net-define /tmp/ocp4-net.xml"
    - "virsh net-start ocp4-net"
    - "virsh net-autostart ocp4-net"
  when: ocp4_net_return.rc == 1

- name: Enable OpenShift provisioning network (172.22.0.0/24)
  ansible.builtin.shell: "{{ item }}"
  loop:
    - "virsh net-define /tmp/ocp4-prov-net.xml"
    - "virsh net-start ocp4-provisioning"
    - "virsh net-autostart ocp4-provisioning"
  when:
    - ocp4_aio_deploy_type == "ipi"
    - ocp4_prov_return.rc == 1
    
    
- name: Enable OpenShift flat network (192.168.3.0/24)
  ansible.builtin.shell: "{{ item }}"
  loop:
    - "virsh net-define /tmp/ocp4-flat-net.xml"
    - "virsh net-start ocp4-flat"
    - "virsh net-autostart ocp4-flat"
  when:
    - ocp4_aio_deploy_type == "ipi"
    - ocp4_prov_return.rc == 1    

- name: Get a list of current VM definitions
  ansible.builtin.shell: virsh list --name
  register: vm_list

- name: Create virtual disk images for nodes - don't clobber
  vars:
    vm_name: "ocp4-{{ item }}"
  ansible.builtin.shell: "qemu-img create -f qcow2 /var/lib/libvirt/images/ocp4-{{ item }}.qcow2 80G"
  loop:
    - "master1"
    - "master2"
    - "master3"
    - "worker1"
    - "worker2"
    - "worker3"
    - "worker4"
  when: build_lab|bool and (vm_name not in vm_list.stdout_lines)

- name: Get a list of currently defined OCS disks
  ansible.builtin.find:
    paths: /var/lib/libvirt/images/ceph
    file_type: file
    patterns: '*osd*'
  register: ocs_created

- name: Build a file list of defined OCS disks
  set_fact:
    ocs_file_list: "{{ ocs_file_list | default([]) | union([item.path]) }}"
  with_items:
    - "{{ ocs_created.files }}"

- name: Create virtual disk images for OCS (even if not used) - don't clobber
  vars:
    filename: "/var/lib/libvirt/images/ceph/ocp4-worker{{ item }}.qcow2"
  ansible.builtin.shell: "qemu-img create -f qcow2 {{ filename }} 100G"
  loop:
    - "1-osd1"
    - "1-osd2"
    - "2-osd1"
    - "2-osd2"
    - "3-osd1"
    - "3-osd2"
    - "4-osd1"
    - "4-osd2"
  when: build_lab|bool and (filename not in ocs_created.files)

- name: Check if base RHEL/CentOS 8 disk image already exists
  stat:
    path: /var/lib/libvirt/images/centos8-kvm.qcow2
  register: base_result

- name: Downloading CentOS 8 base image
  ansible.builtin.get_url:
    url: https://cloud.centos.org/centos/8-stream/x86_64/images/CentOS-Stream-GenericCloud-8-20230501.0.x86_64.qcow2
    dest: /var/lib/libvirt/images/centos8-kvm.qcow2
    mode: 0644
  when: not base_result.stat.exists

- name: Copy over ifcfg-eth0 for bastion VM
  ansible.builtin.copy:
    src: "ifcfg-eth0"
    dest: "/tmp"
    owner: root
    group: root
    mode: 0644

- name: Check if Bastion disk image already exists - don't clobber
  stat:
    path: /var/lib/libvirt/images/ocp4-bastion.qcow2
  register: bastion_result

- name: Creating and customising Bastion VM image from CentOS 8 template
  ansible.builtin.shell: "{{ item }}"
  loop:
    - "qemu-img create -f qcow2 /var/lib/libvirt/images/ocp4-bastion.qcow2 -b /var/lib/libvirt/images/centos8-kvm.qcow2 -F qcow2 200G"
    - "virt-resize --expand /dev/sda1 /var/lib/libvirt/images/centos8-kvm.qcow2 /var/lib/libvirt/images/ocp4-bastion.qcow2"
    - "virt-customize -a /var/lib/libvirt/images/ocp4-bastion.qcow2 --uninstall cloud-init"
    - "virt-customize -a /var/lib/libvirt/images/ocp4-bastion.qcow2 --root-password password:redhat"
    - "virt-copy-in -a /var/lib/libvirt/images/ocp4-bastion.qcow2 /tmp/ifcfg-eth0 /etc/sysconfig/network-scripts"
    - "virt-customize -a /var/lib/libvirt/images/ocp4-bastion.qcow2 --run-command \"mkdir -p /root/.ssh/ && chmod -R 0700 /root/.ssh/\""
    - "virt-customize -a /var/lib/libvirt/images/ocp4-bastion.qcow2 --run-command \"restorecon -Rv /root/.ssh/\""
  when: build_lab|bool and (not bastion_result.stat.exists)

- name: Build Bastion VM definition for IPI
  ansible.builtin.command: >
    virt-install --virt-type kvm --ram {{ vms.bastion.mem }} --vcpus {{ vms.bastion.cpus }} --cpu=host-passthrough --os-variant rhel8.1
    --disk path=/var/lib/libvirt/images/ocp4-bastion.qcow2,device=disk,bus=virtio,format=qcow2
    --network network:ocp4-net,mac={{ vms.bastion.base_network }}
    --network network:ocp4-provisioning,mac={{ vms.bastion.prov_network }}
    --boot hd --noautoconsole --vnc --name ocp4-bastion --boot bios.rebootTimeout=0

- name: Wait 300 seconds for port 22 to become open and contain "OpenSSH"
  ansible.builtin.wait_for:
    port: 22
    host: '192.168.123.100'
    search_regex: OpenSSH
    delay: 10

- name: Build Master VM definitions
  vars:
    vm_name: "ocp4-{{ item.key }}"
  ansible.builtin.command: >
    virt-install --virt-type kvm --ram {{ item.value.mem }} --vcpus {{ item.value.cpus }} --cpu=host-passthrough --os-variant rhel8.1
    --disk path=/var/lib/libvirt/images/ocp4-{{ item.key }}.qcow2,device=disk,bus=virtio,format=qcow2
    --network network:ocp4-provisioning,mac={{ item.value.prov_network }}
    --network network:ocp4-net,mac={{ item.value.base_network }}
    --network network:ocp4-flat,mac={{ item.value.flat_network }}
    --boot hd,network --noautoconsole --vnc --name {{ vm_name }} --boot bios.rebootTimeout=0
  with_dict: "{{ vms['masters_opp'] }}"
  when:
    - vm_name not in vm_list.stdout_lines

- name: Build Worker VM definitions for IPI
  vars:
    vm_name: "ocp4-{{ item.key }}"
  ansible.builtin.command: >
    virt-install --virt-type kvm --ram {{ item.value.mem }} --vcpus {{ item.value.cpus }} --cpu=host-passthrough --os-variant rhel8.1
    --disk path=/var/lib/libvirt/images/ocp4-{{ item.key }}.qcow2,device=disk,bus=virtio,format=qcow2
    --disk path=/var/lib/libvirt/images/ceph/ocp4-{{ item.key }}-osd1.qcow2,device=disk,bus=virtio,format=qcow2
    --disk path=/var/lib/libvirt/images/ceph/ocp4-{{ item.key }}-osd2.qcow2,device=disk,bus=virtio,format=qcow2
    --network network:ocp4-provisioning,mac={{ item.value.prov_network }}
    --network network:ocp4-net,mac={{ item.value.base_network }}
    --network network:ocp4-flat,mac={{ item.value.flat_network }}
    --boot hd,network --noautoconsole --vnc --name ocp4-{{ item.key }} --boot bios.rebootTimeout=0
  with_dict: "{{ vms['workers_opp'] }}"
  when:
    - vm_name not in vm_list.stdout_lines

- name: Iptables flush libvirt forward filter
  ansible.builtin.iptables:
    chain: "{{ item }}"
    flush: yes
  with_items:  [ 'LIBVIRT_FWO', 'LIBVIRT_FWI' ]
  become: true

- name: create default libvirt forward out rules
  ansible.builtin.iptables:
    chain: LIBVIRT_FWO
    protocol: all
    source: 192.168.123.0/24
    jump: ACCEPT
    action: insert
    rule_num: 1

- name: create default libvirt forward in rules
  ansible.builtin.iptables:
    chain: LIBVIRT_FWI
    protocol: all
    destination: 192.168.123.0/24
    jump: ACCEPT
    action: insert
    rule_num: 1

- name: create default libvirt forward out rules (flat)
  ansible.builtin.iptables:
    chain: LIBVIRT_FWO
    protocol: all
    source: 192.168.3.0/24
    jump: ACCEPT
    action: insert
    rule_num: 1

- name: create default libvirt forward in rules (flat)
  ansible.builtin.iptables:
    chain: LIBVIRT_FWI
    protocol: all
    destination: 192.168.3.0/24
    jump: ACCEPT
    action: insert
    rule_num: 1

- name: Enable iptables ports for IPI deployments
  ansible.builtin.iptables:
    chain: LIBVIRT_INP
    protocol: udp
    destination_port: "6230:6236"
    jump: ACCEPT
  when:
    - ocp4_aio_deploy_type == "ipi"

- name: Enable port 9001 on host with iptables
  ansible.builtin.iptables:
    chain: FORWARD
    protocol: tcp
    action: insert
    destination_port: "9001"
    jump: ACCEPT

- name: Forward port 9001 to bastion:9001 with iptables
  ansible.builtin.iptables:
    action: insert
    table: nat
    chain: PREROUTING
    protocol: tcp
    match: tcp
    destination: "{{ aio_host_ip_address }}"
    destination_port: "9001"
    jump: DNAT
    to_destination: 192.168.123.100:9001

- name: Forward port 3128 to bastion:3128 with iptables
  ansible.builtin.iptables:
    action: insert
    table: nat
    chain: PREROUTING
    protocol: tcp
    match: tcp
    destination: "{{ aio_host_ip_address }}"
    destination_port: "3128"
    jump: DNAT
    to_destination: 192.168.123.100:3128
- name: Enable port 8000 on host with iptables
  ansible.builtin.iptables:
    chain: FORWARD
    protocol: tcp
    action: insert
    rule_num: "1"
    destination_port: "8000"
    jump: ACCEPT

- name: Forward port 8000 to bastion:22 with iptables
  ansible.builtin.iptables:
    action: insert
    rule_num: "1"
    table: nat
    chain: PREROUTING
    protocol: tcp
    match: tcp
    destination: "{{ aio_host_ip_address }}"
    destination_port: "8000"
    jump: DNAT
    to_destination: 192.168.123.100:22

- name: Enable ports for Apache ProxyPass
  ansible.builtin.iptables:
    action: insert
    rule_num: "1"
    chain: INPUT
    jump: ACCEPT
    protocol: tcp
    destination_port: "{{ item }}"
  loop:
    - 80
    - 443
    - 6443

- name: Add VBMC entries for IPI deployments
  ansible.builtin.command: "{{ item }}"
  with_items:
    - "vbmc add --username admin --password redhat --port 6230 --address 192.168.123.1 --libvirt-uri qemu:///system ocp4-bastion"
    - "vbmc add --username admin --password redhat --port 6231 --address 192.168.123.1 --libvirt-uri qemu:///system ocp4-master1"
    - "vbmc add --username admin --password redhat --port 6232 --address 192.168.123.1 --libvirt-uri qemu:///system ocp4-master2"
    - "vbmc add --username admin --password redhat --port 6233 --address 192.168.123.1 --libvirt-uri qemu:///system ocp4-master3"
    - "vbmc add --username admin --password redhat --port 6234 --address 192.168.123.1 --libvirt-uri qemu:///system ocp4-worker1"
    - "vbmc add --username admin --password redhat --port 6235 --address 192.168.123.1 --libvirt-uri qemu:///system ocp4-worker2"
    - "vbmc add --username admin --password redhat --port 6236 --address 192.168.123.1 --libvirt-uri qemu:///system ocp4-worker3"
    - "vbmc add --username admin --password redhat --port 6237 --address 192.168.123.1 --libvirt-uri qemu:///system ocp4-worker4"
    - "vbmc start ocp4-bastion"
    - "vbmc start ocp4-master1"
    - "vbmc start ocp4-master2"
    - "vbmc start ocp4-master3"
    - "vbmc start ocp4-worker1"
    - "vbmc start ocp4-worker2"
    - "vbmc start ocp4-worker3"
    - "vbmc start ocp4-worker4"
  register: vbmc_return
  failed_when: vbmc_return.rc > 1
  when:
    ocp4_aio_deploy_type == "ipi"

- name: Set bastion and master VMs to autostart on reboot
  ansible.builtin.command: "{{ item }}"
  with_items:
    - "virsh autostart ocp4-bastion"
    - "virsh autostart ocp4-master1"
    - "virsh autostart ocp4-master2"
    - "virsh autostart ocp4-master3"
  when:
    ocp4_aio_deploy_type == "ipi"

- name: Set worker VMs to autostart on reboot
  ansible.builtin.command: "{{ item }}"
  with_items:
    - "virsh autostart ocp4-worker1"
    - "virsh autostart ocp4-worker2"
    - "virsh autostart ocp4-worker3"
  when:
    - ocp4_aio_deploy_type == "ipi"
    - not ocp4_aio_deploy_compact

- name: Check if ssh-key already exists
  ansible.builtin.stat:
    path: "/root/.ssh/id_rsa"
  register: root_ssh_key

- name: Generate ssh-key for connectivity across deployments
  openssh_keypair:
    path: "/root/.ssh/id_rsa"
    type: rsa
    size: 4096
    state: present
    force: no
  when: not root_ssh_key.stat.exists

- name: Save iptables rules
  ansible.builtin.shell: "iptables-save > /etc/sysconfig/iptables"

- name: restart iptables
  service: name=iptables state=restarted
